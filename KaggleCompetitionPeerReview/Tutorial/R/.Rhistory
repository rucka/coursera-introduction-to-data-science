df.infer$Fare <- imputeMedian(df.infer$Fare, df.infer$Pclass,
as.numeric(levels(df.infer$Pclass)))
# add the other features
df.infer <- featureEngrg(df.infer)
# data prepped for casting predictions
test.keeps <- train.keeps[-1]
pred.these <- df.infer[test.keeps]
# use the logistic regression model to generate predictions
Survived <- predict(glm.tune.5, newdata = pred.these)
# reformat predictions to 0 or 1 and link to PassengerId in a data frame
Survived <- revalue(Survived, c("Survived" = 1, "Perished" = 0))
predictions <- as.data.frame(Survived)
predictions$PassengerId <- df.infer$PassengerId
# write predictions to csv file for submission to Kaggle
write.csv(predictions[,c("PassengerId", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
# get titles
df.infer$Title <- getTitle(df.infer)
# impute missing Age values
df.infer$Title <- changeTitles(df.infer, c("Dona", "Ms"), "Mrs")
titles.na.test <- c("Master", "Mrs", "Miss", "Mr")
df.infer$Age <- imputeMedian(df.infer$Age, df.infer$Title, titles.na.test)
# consolidate titles
df.infer$Title <- changeTitles(df.infer, c("Col", "Dr", "Rev"), "Noble")
df.infer$Title <- changeTitles(df.infer, c("Mlle", "Mme"), "Miss")
df.infer$Title <- as.factor(df.infer$Title)
# impute missing fares
df.infer$Fare[ which( df.infer$Fare == 0)] <- NA
df.infer$Fare <- imputeMedian(df.infer$Fare, df.infer$Pclass,
as.numeric(levels(df.infer$Pclass)))
# add the other features
df.infer <- featureEngrg(df.infer)
# data prepped for casting predictions
test.keeps <- train.keeps[-1]
pred.these <- df.infer[test.keeps]
# use the logistic regression model to generate predictions
Survived <- predict(glm.tune.5, newdata = pred.these)
# reformat predictions to 0 or 1 and link to PassengerId in a data frame
Survived <- revalue(Survived, c("Survived" = 1, "Perished" = 0))
predictions <- as.data.frame(Survived)
predictions$PassengerId <- df.infer$PassengerId
# write predictions to csv file for submission to Kaggle
write.csv(predictions[,c("PassengerId", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
setwd("~/Google Drive/Projects/bigdata/coursera-introduction-to-data-science/KaggleCompetitionPeerReview/BikeSharing")
traindata <- read.csv("data/train.csv", header=TRUE, stringsAsFactors=FALSE)
testdata <- read.csv("data/test.csv", header=TRUE, stringsAsFactors=FALSE)
library("lubridate")
library("rpart")
#install.packages('rattle')
#install.packages('rpart.plot')
#install.packages('RColorBrewer')
#install.packages('Metrics')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(Metrics)
library(caret)
#function for add custom columns
enhancedata <- function (data)
{
data$dt <- ymd_hms(data$datetime)
data$hour <- hour(data$dt)
data$datetime=strptime(as.character(data$datetime), format="%Y-%m-%d %H:%M:%S")
data$weekday = as.factor(weekdays(data$datetime))
data$windrange[data$windspeed < 10] <- '<10'
data$windrange[data$windspeed >= 10 & data$windspeed < 20] <- '10-20'
data$windrange[data$windspeed >= 20 & data$windspeed < 30] <- '20-30'
data$windrange[data$windspeed >= 30] <- '30+'
data$windrange = factor(data$windrange, c(0,1,2,3), ordered=FALSE)
data$humrange[data$humidity < 25] <- '<25'
data$humrange[data$humidity >= 25 & data$humidity < 50] <- '25-50'
data$humrange[data$humidity >= 50 & data$humidity < 75] <- '50-75'
data$humrange[data$humidity >= 75 & data$humidity <100] <- '50-75'
data$humrange[data$humidity >= 100] <- '100+'
data$humrange = as.factor(data$humrange)
data$working[data$holiday == 1] <- 0
data$working[data$weekday == "Saturday"] <- 0
data$working[data$weekday == "Sunday"] <- 0
data$working[is.na(data$working)] <- 1
data$working = as.factor(data$working)
data$hour = as.numeric(data$datetime$hour)
data$season <- factor(data$season, c(1,2,3,4), ordered=FALSE)
data$holiday <- factor(data$holiday, c(0,1), ordered=FALSE)
data$workingday <- factor(data$workingday, c(0,1), ordered=FALSE)
data$weather <- factor(data$weather, c(4,3,2,1), ordered=TRUE)
return(data)
}
traindata <- enhancedata(traindata)
testdata <- enhancedata(testdata)
#split data in train and test
df <- traindata
bound <- floor((nrow(df)/5)*1)         #define % of training and test set
df <- df[sample(nrow(df)), ]           #sample rows
train <- df[1:bound, ]              #get training set
test <- df[(bound+1):nrow(df), ]
library(reshape)
#pivot table
WeekHour=aggregate(count ~ + hour+ weekday, data =train, FUN=mean)
WorkingHour=aggregate(count ~ + hour+ working, data =train, FUN=mean)
library(ggplot2)
#Line chart
ggplot(WorkingHour, aes(x=hour, y=count)) + geom_line(aes(group=working, color=working),size=2,alpha=0.5)
#Heat map
ggplot(WeekHour, aes(x=hour, y=weekday)) + geom_tile(aes(fill = count))+ scale_fill_gradient(low="white", high="red")
test$prediction <- 0
fit <- rpart(count ~ hour + working + atemp + season + weather + humrange + windrange, data=train, method="anova", control=rpart.control(minsplit=2, cp=0))
#fancyRpartPlot(fit)
test$prediction <- predict(fit, test)
rmsle(test$count, test$prediction)
#create submit file
prediction <- predict(fit, testdata)
submit <- data.frame(datetime = testdata$datetime, count = prediction)
View(submit)
setwd("~/Google Drive/Projects/bigdata/coursera-introduction-to-data-science/KaggleCompetitionPeerReview/Tutorial/R")
trainData <- read.csv("../data/train.csv", header = TRUE, stringsAsFactors = FALSE)
testData <- read.csv("../data/test.csv", header = TRUE, stringsAsFactors = FALSE)
head(trainData)
plot(density(trainData$Survived, na.rm = TRUE))
plot(density(trainData$Age, na.rm = TRUE))
#
plot(density(trainData$Survived, na.rm = TRUE))
#
plot(density(trainData$Age, na.rm = TRUE))
#
View(testData)
View(trainData)
counts<- table(trainData$Survived, trainData$Sex)
barplot(counts, xlab = "Gender", ylab = "Number of People", main = "survived and deceased between male and female")
Pclass_survival <- table(trainData$Survived, trainData$Pclass)
barplot(Pclass_survival, xlab = "Cabin Class", ylab = "Number of People", main = "survived and deceased between male and female")
Pclass_survival[2] / (Pclass_survival[1] + Pclass_survival[2])
Pclass_survival[4] / (Pclass_survival[3] + Pclass_survival[4])
Pclass_survival[6] / (Pclass_survival[5] + Pclass_survival[6])
trainData = trainData[-c(1,9:12)]
trainData$Sex = gsub("female",1, trainData$Sex)
trainData$Sex = gsub("male",0, trainData$Sex)
head(trainData)
master_vector = grep("Master.",trainData$Name, fixed=TRUE)
miss_vector = grep("Miss.", trainData$Name, fixed=TRUE)
mrs_vector = grep("Mrs.", trainData$Name, fixed=TRUE)
mr_vector = grep("Mr.", trainData$Name, fixed=TRUE)
dr_vector = grep("Dr.", trainData$Name, fixed=TRUE)
for(i in master_vector) {
trainData$Name[i] = "Master"
}
for(i in miss_vector) {
trainData$Name[i] = "Miss"
}
for(i in mrs_vector) {
trainData$Name[i] = "Mrs"
}
for(i in mr_vector) {
trainData$Name[i] = "Mr"
}
for(i in dr_vector) {
trainData$Name[i] = "Dr"
}
master_age = round(mean(trainData$Age[trainData$Name == "Master"], na.rm = TRUE), digits = 2)
miss_age = round(mean(trainData$Age[trainData$Name == "Miss"], na.rm = TRUE), digits =2)
mrs_age = round(mean(trainData$Age[trainData$Name == "Mrs"], na.rm = TRUE), digits = 2)
mr_age = round(mean(trainData$Age[trainData$Name == "Mr"], na.rm = TRUE), digits = 2)
dr_age = round(mean(trainData$Age[trainData$Name == "Dr"], na.rm = TRUE), digits = 2)
for (i in 1:nrow(trainData)) {
if (is.na(trainData[i,5])) {
if (trainData$Name[i] == "Master") {
trainData$Age[i] = master_age
} else if (trainData$Name[i] == "Miss") {
trainData$Age[i] = miss_age
} else if (trainData$Name[i] == "Mrs") {
trainData$Age[i] = mrs_age
} else if (trainData$Name[i] == "Mr") {
trainData$Age[i] = mr_age
} else if (trainData$Name[i] == "Dr") {
trainData$Age[i] = dr_age
} else {
print("Uncaught Title")
}
}
}
trainData["Child"]
for (i in 1:nrow(trainData)) {
if (trainData$Age[i] <= 12) {
trainData$Child[i] = 1
} else {
trainData$Child[i] = 2
}
}
trainData["Family"] = NA
for (i in 1:nrow(trainData)) {
x = trainData$SibSp[i]
y = trainData$Parch[i]
trainData$Family[i] = x + y + 1
}
trainData["Mother"]
for(i in 1:nrow(trainData)) {
if(trainData$Name[i] == "Mrs" & trainData$Parch[i] > 0) {
trainData$Mother[i] = 1
} else {
trainData$Mother[i] = 2
}
}
#head(trainData)
PassengerId = testData[1]
testData = testData[-c(1, 8:11)]
testData$Sex = gsub("female", 1, testData$Sex)
testData$Sex = gsub("^male", 0, testData$Sex)
test_master_vector = grep("Master.",testData$Name)
test_miss_vector = grep("Miss.", testData$Name)
test_mrs_vector = grep("Mrs.", testData$Name)
test_mr_vector = grep("Mr.", testData$Name)
test_dr_vector = grep("Dr.", testData$Name)
for(i in test_master_vector) {
testData[i, 2] = "Master"
}
for(i in test_miss_vector) {
testData[i, 2] = "Miss"
}
for(i in test_mrs_vector) {
testData[i, 2] = "Mrs"
}
for(i in test_mr_vector) {
testData[i, 2] = "Mr"
}
for(i in test_dr_vector) {
testData[i, 2] = "Dr"
}
test_master_age = round(mean(testData$Age[testData$Name == "Master"], na.rm = TRUE), digits = 2)
test_miss_age = round(mean(testData$Age[testData$Name == "Miss"], na.rm = TRUE), digits =2)
test_mrs_age = round(mean(testData$Age[testData$Name == "Mrs"], na.rm = TRUE), digits = 2)
test_mr_age = round(mean(testData$Age[testData$Name == "Mr"], na.rm = TRUE), digits = 2)
test_dr_age = round(mean(testData$Age[testData$Name == "Dr"], na.rm = TRUE), digits = 2)
for (i in 1:nrow(testData)) {
if (is.na(testData[i,4])) {
if (testData[i, 2] == "Master") {
testData[i, 4] = test_master_age
} else if (testData[i, 2] == "Miss") {
testData[i, 4] = test_miss_age
} else if (testData[i, 2] == "Mrs") {
testData[i, 4] = test_mrs_age
} else if (testData[i, 2] == "Mr") {
testData[i, 4] = test_mr_age
} else if (testData[i, 2] == "Dr") {
testData[i, 4] = test_dr_age
} else {
print(paste("Uncaught title at: ", i, sep=""))
print(paste("The title unrecognized was: ", testData[i,2], sep=""))
}
}
}
#We do a manual replacement here, because we weren't able to programmatically figure out the title.
#We figured out it was 89 because the above print statement should have warned us.
testData[89, 4] = test_miss_age
testData["Child"] = NA
for (i in 1:nrow(testData)) {
if (testData[i, 4] <= 12) {
testData[i, 7] = 1
} else {
testData[i, 7] = 1
}
}
testData["Family"] = NA
for(i in 1:nrow(testData)) {
testData[i, 8] = testData[i, 5] + testData[i, 6] + 1
}
testData["Mother"] = NA
for(i in 1:nrow(testData)) {
if(testData[i, 2] == "Mrs" & testData[i, 6] > 0) {
testData[i, 9] = 1
} else {
testData[i, 9] = 2
}
}
#head(trainData)
#head(testData)
train.glm <- glm(Survived ~ Pclass + Sex + Age + Child + Sex*Pclass + Family + Mother, family = binomial, data = trainData)
#summary(train.glm)
p.hats <- predict.glm(train.glm, newdata=testData, type="response")
survival <- vector()
for(i in 1:length(p.hats)) {
if(p.hats[i] > .5) {
survival[i] <- 1
} else {
survival[i] <- 0
}
}
kaggle.sub <- cbind(PassengerId, survival)
colnames(kaggle.sub) <- c("PassengerId", "Survived")
summary(train.glm)
readData <- function(path.name, file.name, column.types, missing.types) {
read.csv( paste(path.name, file.name, sep=""),
colClasses=column.types,
na.strings=missing.types )
}
getTitle <- function(data) {
title.dot.start <- regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)
title.comma.end <- title.dot.start + attr(title.dot.start, "match.length")-1
data$Title <- substr(data$Name, title.dot.start+2, title.comma.end-1)
return (data$Title)
}
Titanic.path <- "~/Google Drive/Projects/bigdata/coursera-introduction-to-data-science/KaggleCompetitionPeerReview/Tutorial/R/../data/"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
missing.types <- c("NA", "")
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]
train.raw <- readData(Titanic.path, train.data.file,
train.column.types, missing.types)
df.train <- train.raw
test.raw <- readData(Titanic.path, test.data.file,
test.column.types, missing.types)
df.infer <- test.raw
require(Amelia)
missmap(df.train, main="Titanic Training Data - Missings Map",
col=c("yellow", "black"), legend=FALSE)
barplot(table(df.train$Survived),
names.arg = c("Perished", "Survived"),
main="Survived (passenger fate)", col="black")
barplot(table(df.train$Pclass),
names.arg = c("first", "second", "third"),
main="Pclass (passenger traveling class)", col="firebrick")
barplot(table(df.train$Sex), main="Sex (gender)", col="darkviolet")
hist(df.train$Age, main="Age", xlab = NULL, col="brown")
barplot(table(df.train$SibSp), main="SibSp (siblings + spouse aboard)",
col="darkblue")
barplot(table(df.train$Parch), main="Parch (parents + kids aboard)",
col="gray50")
hist(df.train$Fare, main="Fare (fee paid for ticket[s])", xlab = NULL,
col="darkgreen")
barplot(table(df.train$Embarked),
names.arg = c("Cherbourg", "Queenstown", "Southampton"),
main="Embarked (port of embarkation)", col="sienna")
require(corrgram)
corrgram.data <- df.train
## change features of factor type to numeric type for inclusion on correlogram
corrgram.data$Survived <- as.numeric(corrgram.data$Survived)
corrgram.data$Pclass <- as.numeric(corrgram.data$Pclass)
corrgram.data$Embarked <- revalue(corrgram.data$Embarked,
c("C" = 1, "Q" = 2, "S" = 3))
## generate correlogram
corrgram.vars <- c("Survived", "Pclass", "Sex", "Age",
"SibSp", "Parch", "Fare", "Embarked")
corrgram(corrgram.data[,corrgram.vars], order=FALSE,
lower.panel=panel.ellipse, upper.panel=panel.pie,
text.panel=panel.txt, main="Titanic Training Data")
boxplot(df.train$Age ~ df.train$Survived,
main="Passenger Fate by Age",
xlab="Survived", ylab="Age")
summary(df.train$Age)
#names(df.train)
df.train$Title <- getTitle(df.train)
unique(df.train$Title)
titles.na.train <- c("Dr", "Master", "Mrs", "Miss", "Mr")
options(digits=2)
require(Hmisc)
bystats(df.train$Age, df.train$Title,
fun=function(x)c(Mean=mean(x),Median=median(x)))
titles.na.train <- c("Dr", "Master", "Mrs", "Miss", "Mr")
imputeMedian <- function(impute.var, filter.var, var.levels) {
for (v in var.levels) {
impute.var[ which( filter.var == v)] <- impute(impute.var[
which( filter.var == v)])
}
return (impute.var)
}
df.train$Age[which(df.train$Title=="Dr")]
df.train$Age <- imputeMedian(df.train$Age, df.train$Title,
titles.na.train)
df.train$Embarked[which(is.na(df.train$Embarked))] <- 'S'
subset(df.train, Fare < 7)[order(subset(df.train, Fare < 7)$Fare,
subset(df.train, Fare < 7)$Pclass),
c("Age", "Title", "Pclass", "Fare")]
## impute missings on Fare feature with median fare by Pclass
df.train$Fare[ which( df.train$Fare == 0 )] <- NA
df.train$Fare <- imputeMedian(df.train$Fare, df.train$Pclass,
as.numeric(levels(df.train$Pclass)))
df.train$Title <- factor(df.train$Title,
c("Capt","Col","Major","Sir","Lady","Rev",
"Dr","Don","Jonkheer","the Countess","Mrs",
"Ms","Mr","Mme","Mlle","Miss","Master"))
boxplot(df.train$Age ~ df.train$Title,
main="Passenger Age by Title", xlab="Title", ylab="Age")
## function for assigning a new title value to old title(s)
changeTitles <- function(data, old.titles, new.title) {
for (honorific in old.titles) {
data$Title[ which( data$Title == honorific)] <- new.title
}
return (data$Title)
}
## Title consolidation
df.train$Title <- changeTitles(df.train,
c("Capt", "Col", "Don", "Dr",
"Jonkheer", "Lady", "Major",
"Rev", "Sir"),
"Noble")
df.train$Title <- changeTitles(df.train, c("the Countess", "Ms"),
"Mrs")
df.train$Title <- changeTitles(df.train, c("Mlle", "Mme"), "Miss")
df.train$Title <- as.factor(df.train$Title)
require(plyr)     # for the revalue function
require(stringr)  # for the str_sub function
## test a character as an EVEN single digit
isEven <- function(x) x %in% c("0","2","4","6","8")
## test a character as an ODD single digit
isOdd <- function(x) x %in% c("1","3","5","7","9")
featureEngrg <- function(data) {
## Using Fate ILO Survived because term is shorter and just sounds good
data$Fate <- data$Survived
## Revaluing Fate factor to ease assessment of confusion matrices later
data$Fate <- revalue(data$Fate, c("1" = "Survived", "0" = "Perished"))
## Boat.dibs attempts to capture the "women and children first"
## policy in one feature.  Assuming all females plus males under 15
## got "dibs' on access to a lifeboat
data$Boat.dibs <- "No"
data$Boat.dibs[which(data$Sex == "female" | data$Age < 15)] <- "Yes"
data$Boat.dibs <- as.factor(data$Boat.dibs)
## Family consolidates siblings and spouses (SibSp) plus
## parents and children (Parch) into one feature
data$Family <- data$SibSp + data$Parch
## Fare.pp attempts to adjust group purchases by size of family
data$Fare.pp <- data$Fare/(data$Family + 1)
## Giving the traveling class feature a new look
data$Class <- data$Pclass
data$Class <- revalue(data$Class,
c("1"="First", "2"="Second", "3"="Third"))
## First character in Cabin number represents the Deck
data$Deck <- substring(data$Cabin, 1, 1)
data$Deck[ which( is.na(data$Deck ))] <- "UNK"
data$Deck <- as.factor(data$Deck)
## Odd-numbered cabins were reportedly on the port side of the ship
## Even-numbered cabins assigned Side="starboard"
data$cabin.last.digit <- str_sub(data$Cabin, -1)
data$Side <- "UNK"
data$Side[which(isEven(data$cabin.last.digit))] <- "port"
data$Side[which(isOdd(data$cabin.last.digit))] <- "starboard"
data$Side <- as.factor(data$Side)
data$cabin.last.digit <- NULL
return (data)
}
df.train <- featureEngrg(df.train)
train.keeps <- c("Fate", "Sex", "Boat.dibs", "Age", "Title",
"Class", "Deck", "Side", "Fare", "Fare.pp",
"Embarked", "Family", "Survived")
df.train.munged <- df.train[train.keeps]
require(caret)
## split training data into train batch and test batch
set.seed(23)
training.rows <- createDataPartition(df.train.munged$Survived, p = 0.8, list = FALSE)
train.batch <- df.train.munged[training.rows, ]
test.batch <- df.train.munged[-training.rows, ]
Titanic.logit.1 <- glm(formula = Fate ~ Sex + Class + Age + Family + Embarked +
Fare, family = binomial("logit"), data = train.batch)
anova(Titanic.logit.1, test="Chisq")
Titanic.logit.2 <- glm(Fate ~ Sex + Class + Age + Family + Embarked + Fare.pp,
data = train.batch, family=binomial("logit"))
anova(Titanic.logit.2, test="Chisq")
glm(Fate ~ Sex + Class + Age + Family + Embarked,
data = train.batch, family=binomial("logit"))
Titanic.logit.2 <- glm(Fate ~ Sex + Class + Age + Family + Embarked + Fare.pp,
data = train.batch, family=binomial("logit"))
anova(Titanic.logit.2, test="Chisq")
glm(Fate ~ Sex + Class + Age + Family + Embarked,
data = train.batch, family=binomial("logit"))
cv.ctrl <- trainControl(method = "repeatedcv", repeats = 3,
summaryFunction = twoClassSummary,
classProbs = TRUE)
require(pROC)
set.seed(35)
glm.tune.1 <- train(Fate ~ Sex + Class + Age + Family + Embarked,
data = train.batch,
method = "glm",
metric = "ROC",
trControl = cv.ctrl)
glm.tune.1
summary(glm.tune.1)
set.seed(35)
glm.tune.2 <- train(Fate ~ Sex + Class + Age + Family + I(Embarked=="S"),
data = train.batch, method = "glm",
metric = "ROC", trControl = cv.ctrl)
summary(glm.tune.2)
set.seed(35)
glm.tune.3 <- train(Fate ~ Sex + Class + Title + Age
+ Family + I(Embarked=="S"),
data = train.batch, method = "glm",
metric = "ROC", trControl = cv.ctrl)
summary(glm.tune.3)
set.seed(35)
glm.tune.4 <- train(Fate ~ Class + I(Title=="Mr") + I(Title=="Noble")
+ Age + Family + I(Embarked=="S"),
data = train.batch, method = "glm",
metric = "ROC", trControl = cv.ctrl)
summary(glm.tune.4)
set.seed(35)
glm.tune.5 <- train(Fate ~ Class + I(Title=="Mr") + I(Title=="Noble")
+ Age + Family + I(Embarked=="S")
+ I(Title=="Mr"&Class=="Third"),
data = train.batch,
method = "glm", metric = "ROC",
trControl = cv.ctrl)
summary(glm.tune.5)
